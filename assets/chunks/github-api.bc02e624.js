import{p as u,w as m}from"./framework.ddd7a9a9.js";const f=s=>s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),g={__name:"TextReplacer",props:{container:{type:String,default:"body"},pattern:{type:String,required:!0},replacement:{type:String,required:!0},prefix:{type:String,default:""},suffix:{type:String,default:""}},setup(s){const t=s,n=(r,a,i)=>{a=new RegExp(f(a),"g"),document.querySelectorAll(r).forEach(p=>{p.innerHTML=p.innerHTML.replace(a,i)})};let e;return u(()=>{m(()=>t.replacement,r=>{if(t.replacement&&t.replacement!==""){const a=e||t.pattern,i=t.prefix+r+t.suffix;n(t.container,a,i),e=i}},{immediate:!0})}),(r,a)=>null}},o=30,d=async(s,t)=>l("latestVersion")?l("latestVersion"):await fetch(`https://api.github.com/repos/${s}/${t}/releases/latest`).then(n=>n.json()).then(n=>{if(n.tag_name){const e=n.tag_name.match(/(\d+\.\d+)[\-\.\da-zA-Z]+/)[0]??"";return e!==""&&c("latestVersion",e,o),e}else return fetch(`https://api.github.com/repos/${s}/${t}/tags`).then(e=>e.json()).then(e=>{if(e.length){const r=e[0].name.match(/(\d+\.\d+)[\-\.\da-zA-Z]+/)[0]??"";return r!==""&&c("latestVersion",r,o),r}return""})}),S=async(s,t)=>l("latestRelease")?l("latestRelease"):await fetch(`https://api.github.com/repos/${s}/${t}/releases/latest`).then(n=>n.json()).then(n=>{if(n.prerelease===!1){const e="latest";return c("latestRelease",e,o),e}else return fetch(`https://api.github.com/repos/${s}/${t}/tags`).then(e=>e.json()).then(e=>{if(e.length){const r=e[0].name.match(new RegExp("(?<=\\.\\d-)[^.]+"))[0]??"";return r!==""&&c("latestRelease",r,o),r}return""})});function c(s,t,n){const r={value:t,expiry:new Date().getTime()+n*1e3};sessionStorage.setItem(s,JSON.stringify(r))}function l(s){const t=sessionStorage.getItem(s);if(!t)return null;const n=JSON.parse(t);return new Date().getTime()>n.expiry?(sessionStorage.removeItem(s),null):n.value}export{g as _,S as a,d as g};
